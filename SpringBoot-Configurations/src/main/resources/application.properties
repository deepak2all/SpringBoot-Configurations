my.greeting=Deepak

app.name = My app
app.description = Welcome to ${app.name}

# Note that the values in the property file can be over-written 
# by placing another properties file in the same location of the jar file
# Spring will use the external properties file instead of the one the jar that's
# present within the jar file

my.list.value=One, Two, Three

sampleKeyValue={key1:"value1", key2: "value2"}

#@ConfigurationProperties is used to pull a group of config values
#This is done by specifying the prefix in the respective class
db.connection="xyz"
db.host="dbserver"
db.port=5000
# We can use @Configuration to use it as one spring bean
# within the controller
# so that all the values can be fetched at one shot


#Enable endpoints in actuator
management.endpoints.web.exposure.include=*
# Then go to the url
# http://localhost:8080/actuator/configprops
# The values of our properties as well as in-built properties will be visible

# New profiles can be creates using the naming convention
# application-<profileName>.extn

# Making it Spring Cloud Config Client
# By adding the dependency "spring-cloud-starter-config"
# Point it to Config Server, to get the properties

# Refreshing the config data using @RefreshScope
spring.cloud.config.uri=http://localhost:8888